AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Expense Tracker Serverless Application

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: python3.12

Resources:
  # DynamoDB Table
  ExpensesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ExpensesTable
      AttributeDefinitions:
        - AttributeName: expense_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: expense_id
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # S3 Bucket for Receipts
  ReceiptsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-receipts-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ExpenseTrackerUserPool
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - Name: email
          Required: true
          Mutable: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ExpenseTrackerClient
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  # API Gateway
  ExpenseApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn

  # Lambda Function: Expenses CRUD
  ExpensesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/
      Handler: expenses.lambda_handler
      Environment:
        Variables:
          TABLE_NAME: !Ref ExpensesTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ExpensesTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-ExpensesFunction:*'
      Events:
        GetExpenses:
          Type: Api
          Properties:
            RestApiId: !Ref ExpenseApi
            Path: /expenses
            Method: GET
        CreateExpense:
          Type: Api
          Properties:
            RestApiId: !Ref ExpenseApi
            Path: /expenses
            Method: POST
        UpdateExpense:
          Type: Api
          Properties:
            RestApiId: !Ref ExpenseApi
            Path: /expenses/{id}
            Method: PUT
        DeleteExpense:
          Type: Api
          Properties:
            RestApiId: !Ref ExpenseApi
            Path: /expenses/{id}
            Method: DELETE

  # Lambda Function: Receipts Upload/Retrieval
  ReceiptsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/
      Handler: receipts.lambda_handler
      Environment:
        Variables:
          BUCKET_NAME: !Ref ReceiptsBucket
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ReceiptsBucket
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-ReceiptsFunction:*'
      Events:
        UploadReceipt:
          Type: Api
          Properties:
            RestApiId: !Ref ExpenseApi
            Path: /receipts
            Method: POST
        GetReceipt:
          Type: Api
          Properties:
            RestApiId: !Ref ExpenseApi
            Path: /receipts/{id}
            Method: GET

  # Lambda Function: Admin Operations
  AdminFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/
      Handler: admin.lambda_handler
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminGetUser
                - cognito-idp:AdminUpdateUserAttributes
                - cognito-idp:AdminDeleteUser
              Resource: !GetAtt UserPool.Arn
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-AdminFunction:*'
      Events:
        AdminApi:
          Type: Api
          Properties:
            RestApiId: !Ref ExpenseApi
            Path: /admin/{proxy+}
            Method: ANY

  # Step Functions State Machine
  ExpenseWorkflowStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: ../statemachine/expense-workflow.asl.json
      DefinitionSubstitutions:
        ExpensesFunctionArn: !GetAtt ExpensesFunction.Arn
        ReceiptsFunctionArn: !GetAtt ReceiptsFunction.Arn
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref ExpensesFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ReceiptsFunction
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/states/${AWS::StackName}-*:*'

  # CloudWatch Log Groups (Explicit)
  ExpensesFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-ExpensesFunction'
      RetentionInDays: 7

  ReceiptsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-ReceiptsFunction'
      RetentionInDays: 7

  AdminFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-AdminFunction'
      RetentionInDays: 7

Outputs:
  ExpenseApiUrl:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ExpenseApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  
  UserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref UserPool
  
  UserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref UserPoolClient
  
  ReceiptsBucketName:
    Description: "S3 Bucket for Receipts"
    Value: !Ref ReceiptsBucket
  
  ExpensesTableName:
    Description: "DynamoDB Table Name"
    Value: !Ref ExpensesTable
  
  StateMachineArn:
    Description: "Step Functions State Machine ARN"
    Value: !Ref ExpenseWorkflowStateMachine
